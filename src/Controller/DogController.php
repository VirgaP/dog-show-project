<?php

namespace App\Controller;

use App\Entity\Dog;
use App\Entity\Title;
use App\Form\DogType;
use App\Repository\DogRepository;
use App\Repository\ShowRepository;
use App\Services\FileUploader;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;

/**
 * @Route("/dog")
 */
class DogController extends Controller
{
    /**
     * @Route("/list/{page}", defaults={"page" = 1}, name="dog_index", methods="GET")
     * @Security("is_granted('ROLE_ADMIN')")
     */
    public function index($page, DogRepository $dogRepository): Response
    {
        $paginator = $dogRepository->getAllDogs($page);
        $dogs = $paginator->getIterator();

        if (count($dogs) == 0) {
            throw new NotFoundHttpException('404. Page not found');
        }
        $maxPages = ceil($paginator->count() / DogRepository::POSTS_PER_PAGE);
        $currentPage = $page;
        $routeName = 'dog_index';

        return $this->render('dog/index.html.twig',compact('dogs', 'maxPages', 'currentPage', 'routeName') );

    }

    /**
     * @Route("/new", name="dog_new", methods="GET|POST")
     */
    public function new(Request $request, FileUploader $fileUploader): Response
    {
        $dog = new Dog();
        $user = $this->getUser();
        $owner= $user->getOwner();

        $form = $this->createForm(DogType::class, $dog);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $dog->setOwner($owner);

            foreach ($form->getData()->getFiles() as $file) {

                if ($file != null) {

                    $fileName=$fileUploader->upload($file->getFile());
                    $file->setFileName($fileName);
;
                }
            }

            $em = $this->getDoctrine()->getManager();
            $em->persist($dog);
            $em->flush();


            return $this->redirectToRoute('fos_user_profile_show');
        }

        return $this->render('dog/new.html.twig', [
            'dog' => $dog,
            'form' => $form->createView(),
        ]);
    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="dog_show", methods="GET")
     */
    public function show(Dog $dog, ShowRepository $repository): Response
    {
        $this->denyAccessUnlessGranted('see', $dog);
        //alternately use
//        if ($dog->getOwner() != $this->getUser()->getOwner()) {
//            throw $this->createAccessDeniedException(
//                'This does not seem to be your dog!'
//            );
//        }
        return $this->render('dog/show.html.twig', ['dog' => $dog]);
    }

    /**
     * @Route("/{id}/edit", name="dog_edit", methods="GET|POST")
     */
    public function edit(Request $request, Dog $dog, FileUploader $fileUploader): Response
    {
        $this->denyAccessUnlessGranted('edit', $dog);

        $form = $this->createForm(DogType::class, $dog);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            foreach ($form->getData()->getFiles() as $file) {

                if ($file != null) {

                    $fileName = $fileUploader->upload($file->getFile());//upload retrieves instnce of uploaded file from service upload method
                    $file->setFileName($fileName);

                }
            }
            $em = $this->getDoctrine()->getManager();
            $em->persist($dog);
            $em->flush();

            return $this->redirectToRoute('dog_show', ['id' => $dog->getId()]);
        }
                return $this->render('dog/edit.html.twig', [
                    'dog' => $dog,
                    'form' => $form->createView(),
                ]);

    }

    /**
     * @Route("/{id}", name="dog_delete", methods="DELETE")
     */
    public function delete(Request $request, Dog $dog): Response
    {
        $this->denyAccessUnlessGranted('delete', $dog);
        if ($this->isCsrfTokenValid('delete'.$dog->getId(), $request->request->get('_token'))) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($dog);
            $em->flush();
        }

        return $this->redirectToRoute('dog_index');
    }

}
